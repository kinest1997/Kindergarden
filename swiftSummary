import UIKit

/*
1. Comment(주석)
 // : 1줄만 주석달기
 /* */ : 구간 지정하여 주석달기

 */

/*
 2. Tupple
 1개의 자료에 2가지 이상의 데이터가 들어갈때
 그것을 튜플 형태라고 한다
 ex : 좌표 (x,y)
 */
let coordinate1 = (x : 2,y : 1)
coordinate1.0
coordinate1.1
coordinate1.x
coordinate1.y

let (x2,y2) = coordinate1
x2
y2


/*
 3. Boolean
 true , false 2가지 값만을 가지는형태
 명제의 참과 거짓을 구별할떄 사용
 > , < , ==
 대소 비교, 같은값 총 3가지가있다
 && , ||
 and , or 두가지 연산자가 더있다
 */

let yes = true
let no = false

let threeIsGreaterThanTwo = 3 > 2
if threeIsGreaterThanTwo {
    print("참이다")
} else{
    print("거짓이다")
}

let heeSungIsMale = true
let yourNameKang = true
let myNameKang = false
// 두 불리언값을 가지는 형태를 and 나 or 값으로 더 표현 가능
let heesungAndMale = heeSungIsMale && yourNameKang
// && 즉 and 는 둘다 참이여야 true 값을 반환 한다
let kangOrMale = myNameKang || heeSungIsMale
// || 즉 or 은 둘중 하나만 참이여도 true 값을 반환한다




/*
 4. if , else if , else
 if 조건 ....{
    조건이 참인 경우 수행하는 코드
 } else if ...조건 {
 if 조건이 거짓일때 새롭게 다른 조건의 참거짓을 확인하여 수행하는코드
 }
 else {
 위의 조건들이 모두 거짓일때 수행하는 코드
 }
 }
 */
let a = 9
let b = 14
let c = 10
if a > b {
    print("a가 b보다 크다")
} else if a > c {
    print("a가 c보다 크다")
}else {
    print("a가 제일작다")
}


/*
 5. Scope
 */
func countDown(number : Int) {
    // 여기서 var count 변수는 countnum안에서만 유효한 변수이다
    var count = number
    
    for _ in 1...number {
        print("\(count)")
        count -= 1
        if count == 0{
            print("GO!")
            break
            // break 코드 사용시 for 문을 즉시 종료시킨다
        }
    }
}
// var count 는 func 안의 변수이므로 밖에서 사용할수없다
countDown(number: 8)

/*
 6. while
 while 문, repeat while 문 두가지가있다
 조건 만족하지 않을때 타
  
 while 문
 
 while 조건 {
 code
 }
 
 repeat 문
 
 repeat {
 code
 } while 조건
 
 */
// 일반 while 문
//조건 -> 코드수행 -> 조건
var i = 0
while i < 10 {
    print(i)
    if i == 4 {
        break
        //break 코드 사용시 아래의 코드는 수행하지않고 while 문을 종료한다
    }
    i += 1
}

// repeat while 문
//코드수행 -> 조건 -> 코드수행
i = 10
repeat {
    print(i)
    i += 1
} while i < 10



/*
 7. for loop
 
 range (범위)
 범위를 지정할땐 1...3 처럼 점세개로 앞뒤 숫자를 포함시킬수있고
 1..<4 처럼 점 두개와 대소 비교로 미만 초과를 정할수있다

 */
let closedRange = 1...10
let halfClosedRange = 1..<9
var sum = 0
for i in 1...10 {
    print("sum--\(sum)")
    sum += i
}
//만약 for 문의 앞부분 문자를 사용하지않을경우 언더바 _ 를 사용하여 없애줄수있다
for _ in 1...3{
    print("hurai")
}

// x % y == z
// x 를 y 로 나눴을떄 나머지가 z 가 된다는 뜻, % 는 나눈 후의 나머지를 구하는데 사용,
for evenNum in closedRange {
    if evenNum % 2 == 0 {
        print("\(evenNum)")
    }
}

// 위의 코드와 동일하지만 다른 표현방식이다
for evenNum in closedRange where evenNum % 2 == 0 {
    print("\(evenNum)")
}

//continue
for evenNum in closedRange {
    if evenNum == 4 {
        continue
        // continue 코드 사용시 아래 남아있는 코드는 실행시키지않고 다음루프로 넘어간다
    }
    print("\(evenNum)")
}

//for loop 중첩도 가능하다, 하지만 성능,가독성 면에서 매우 떨어진다
//구구단
for i in closedRange{
    for j in halfClosedRange{
        print("\(i)x\(j)=\(i*j)")
    }
}

/* 8. switch
 확인하려는 변수를 블럭안에서 가능한 케이스들을 부합시에 수행시킨다
switch 변수 {
 case :
 case :
 default :
 }
 switch 문은
 
 */

let number1 = 8
switch number1 {
case 0...10 :
    print("this is zero to ten")
//만약 case 중에서 위에서 먼저 부합하는게 나오면 아래의 케이스는 수행되지않고 넘어간다
case 8 :
    print (8)
// 위의 case 에 해당하는것이 없을때 아래의 default 값을 출력한다
default :
    print("i have no idea")
    
}

let pet = "bird"
switch pet {
case "pet","dog","bird" : print("Oh it is pet")
default : print("it's not a pet")
}

let number2 = 18
switch number2 {
// switch 문에서도 where 를 이용하여 조건을 추가시킬수있다
case _ where number2 % 3 == 0 :
print("3의 배수입니다")
// 언더바 _ 를 사용시 해당하는 부분을 사용하지않는다는 뜻
default :
    print("3의 배수가 아닙니다")
}

//튜플형태를 가진것도 switch 를 사용할수있다
let coordinate2 = (3,9)
switch coordinate2 {
case (0,0) :
    print("원점에 있네요")
case (_,0) :
    print("x축 위에있네요")
//만약 언더바로 표시한 부분의 값을 사용하고싶을때 let x 등의 문자로 표시하면 사용가능하다
case(0,let y) :
    print("y축 위에있네요, \(y)좌표")
case(let x, let y) where x == y :
    print("\(x),\(y) 같다잉")
default :
    print("왜 거기있니")
}

/*
 9. function
 기능을 수행하는 코드블록
 function(){
 code
 }
 
 method 와도 비슷하지않은가?
 아니다 method는 object 에 속해서 사용하지만 function은 독립적으로 사용가능 하다
 object.methodName() : method
 functionName() : function
 
 */
//변수가 1개인 함수
//변수를 100배 곱하여 출력하는 함수
func multiply1(num : Int ) {
    print("\(num * 100)")
}
multiply1(num: 100)

//만약 함수에서 parameter의 이름을 안적고 변수만 적고싶을때 앞에 언더바를 넣으면 된다.
// 하지만 이름을 안적으면 헷갈릴수도있으니 그냥 적는게 나은듯 하다
func multiply3(_ num : Int ) {
    print("\(num * 100)")
}
multiply3(20)
//만약 parameter에 기본값이 있을때 지정해줄수있고 함수 사용시에 parameter를 적지않으면 기본값을 사용한다
func multiplyTwo(first : Int = 4, second : Int) {
    print("\(first * second)")
}
multiplyTwo(second: 12)
//물론 값을 적으면 기본값이 아닌 새로 입력한 값을 사용한다
multiplyTwo(first : 21,second: 5)

//만약 함수를 이용하여 구한값을 또 다른곳에 사용하고싶다면?
//100배 곱한값을 구하는 함수 + 그 값을 출력하는것
func multiply2(num : Int) -> Int {
    // -> x x의 위치에 내가 이 함수로 얻고싶은 값의 형태를 적어준다 ex : String, Int 등등
    return num*100
}
//함수로 출력한 값을 특정 상수에 할당시킬수있다
let hundread = multiply2(num: 100)
print(hundread)
//함수로 출력한 값을 상수에 할당시키지않고 바로 출력할수있다
print(multiply2(num: 20))
